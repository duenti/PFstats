21d20
<     ui->listWidget2->resizeColumnToContents(0);
24,25d22
<     currentFilter = nullptr;
<     currentNetwork = nullptr;
44,47d40
<     //Seta nÃºmero de cores na tela do minss
<     unsigned cores = omp_get_num_procs();
<     ui->intNumOfCores->setValue(cores);
< 
455,458d447
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
460c449,450
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
485,488d474
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
490c476,477
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
514,517d500
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
519c502,503
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
543,546d526
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
548c528,529
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
568,571d548
<         QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<         treeItem->setText(0,name.c_str());
<         filter->setQtreeWidgetItem(treeItem);
< 
573c550,551
<         //ui->listWidget2->addItem(name.c_str());
---
> 
>         ui->listWidget2->addItem(name.c_str());
576c554
<     ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
---
>     ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
578c556
<     //emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
---
>     emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
622,625d599
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
627c601,602
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
654,657d628
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
659c630,631
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
681,684d652
<             QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<             treeItem->setText(0,newName.c_str());
<             filter->setQtreeWidgetItem(treeItem);
< 
686c654,655
<             //ui->listWidget2->addItem(newName.c_str());
---
> 
>             ui->listWidget2->addItem(newName.c_str());
708,711d676
<         QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<         treeItem->setText(0,name.c_str());
<         filter->setQtreeWidgetItem(treeItem);
< 
713c678,679
<         //ui->listWidget2->addItem(name.c_str());
---
> 
>         ui->listWidget2->addItem(name.c_str());
716,718c682,683
<     ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
<     //ui->listWidget2->item(ui->listWidget2->count()-1)->setSelected(true);
<     //emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
---
>     ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
>     emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
788,789c753,754
< void MainWindow::pcalc(Network *net, int minlogp, float minssfraction, float mindeltafreq){
<     net->CalculateFrequencies();
---
> void MainWindow::pcalc(int minlogp, float minssfraction, float mindeltafreq){
>     currentFilter->CalculateFrequencies();
792c757
<         net->SympvalueCalculation(minlogp,minssfraction,mindeltafreq);
---
>         currentFilter->SympvalueCalculation(minlogp,minssfraction,mindeltafreq);
794c759
<         net->henikoffpvalueCalculation(minlogp,minssfraction,mindeltafreq,currentFilter->getWeights());
---
>         currentFilter->henikoffpvalueCalculation(minlogp,minssfraction,mindeltafreq);
797c762
< void MainWindow::dfsUtil(Network *net, string node, int id){
---
> void MainWindow::dfsUtil(string node, int id){
799c764
<     net->addToCommunity(node,id);
---
>     currentFilter->addToCommunity(node,id);
804c769
<             dfsUtil(net,no,id);
---
>             dfsUtil(no,id);
808c773
< bool MainWindow::trivcomm(Network *net){
---
> bool MainWindow::trivcomm(){
811c776
<     net->clearCommunity();
---
>     currentFilter->clearCommunity();
814c779
<     set<string> nodes = net->getCorrelationNodes();
---
>     set<string> nodes = currentFilter->getCorrelationNodes();
821,822c786,787
<     for(unsigned int i = 0; i < net->getCorrelationGraphSize(); i++){
<         tuple<string,string,int> edge = net->getCorrelationEdge(i);
---
>     for(unsigned int i = 0; i < currentFilter->getCorrelationGraphSize(); i++){
>         tuple<string,string,int> edge = currentFilter->getCorrelationEdge(i);
839c804
<             net->addCommunity(comm);
---
>             currentFilter->addCommunity(comm);
841c806
<             this->dfsUtil(net,no,count);
---
>             this->dfsUtil(no,count);
853,855c818
<     net->sortCommunitiesVector();
< 
<     if(net->getCommListSize() == 0) return false;
---
>     currentFilter->sortCommunitiesVector();
860c823
< /*//OLD
---
> /*
1099c1062
<     currentNetwork->getCommunitiesFromRAM();
---
>     currentFilter->getCommunitiesFromRAM();
1102c1065
<     currentNetwork->Cluster2SCMFromRAM(false,0,0);
---
>     currentFilter->Cluster2SCMFromRAM(false,0,0);
1104,1105c1067,1068
<     currentNetwork->DeltaCommunitiesCalculation();
<     currentNetwork->pMatrix2HTMLRAM(false,1);
---
>     currentFilter->DeltaCommunitiesCalculation();
>     currentFilter->pMatrix2HTMLRAM(false,1);
1251c1214
<     unsigned int nrows = currentNetwork->getGraphSize();
---
>     unsigned int nrows = currentFilter->getCorrGraphSize();
1257,1259c1220,1222
<     ui->lblMinLogP->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore())));
<     ui->lblMinss->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction())));
<     ui->lblDeltaFreq->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta())));
---
>     ui->lblMinLogP->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore())));
>     ui->lblMinss->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction())));
>     ui->lblDeltaFreq->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta())));
1263c1226
<         tuple<string,string,int> tupCorr = currentNetwork->getGraphTuple(i);
---
>         tuple<string,string,int> tupCorr = currentFilter->getCorrGraphTuple(i);
1276c1239
<     unsigned int nrows = currentNetwork->getGraphSize();
---
>     unsigned int nrows = currentFilter->getCorrGraphSize();
1282,1284c1245,1247
<     ui->lblMinLogP->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore())));
<     ui->lblMinss->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction())));
<     ui->lblDeltaFreq->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta())));
---
>     ui->lblMinLogP->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore())));
>     ui->lblMinss->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction())));
>     ui->lblDeltaFreq->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta())));
1288c1251
<         tuple<string,string,int> tupCorr = currentNetwork->getGraphTuple(i);
---
>         tuple<string,string,int> tupCorr = currentFilter->getCorrGraphTuple(i);
1356c1319
<     unsigned int nrows = currentNetwork->getGraphSize();
---
>     unsigned int nrows = currentFilter->getCorrGraphSize();
1362,1364c1325,1327
<     ui->lblMinLogP->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore())));
<     ui->lblMinss->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction())));
<     ui->lblDeltaFreq->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta())));
---
>     ui->lblMinLogP->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore())));
>     ui->lblMinss->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction())));
>     ui->lblDeltaFreq->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta())));
1368c1331
<         tuple<string,string,int> tupCorr = currentNetwork->getGraphTuple(i);
---
>         tuple<string,string,int> tupCorr = currentFilter->getCorrGraphTuple(i);
1396d1358
<     ui->cmdUpdateGraphPdbNumbering->setEnabled(true);
1401c1363
<     unsigned int nrows = currentNetwork->getGraphSize();
---
>     unsigned int nrows = currentFilter->getCorrGraphSize();
1406c1368
<     map<string,int> nodes = currentNetwork->getNodesHubs();
---
>     map<string,int> nodes = currentFilter->getNodesHubs();
1448c1410
<         tuple<string,string,int> tupCorr = currentNetwork->getGraphTuple(i);
---
>         tuple<string,string,int> tupCorr = currentFilter->getCorrGraphTuple(i);
1509c1471,1472
<     unsigned int nrows = currentNetwork->getGraphSize();
---
> 
>     unsigned int nrows = currentFilter->getCorrGraphSize();
1518c1481
<         nodes = currentNetwork->getPositiveNodeHubs();
---
>         nodes = currentFilter->getPositiveNodeHubs();
1520c1483
<         nodes = currentNetwork->getNodesHubs();
---
>         nodes = currentFilter->getNodesHubs();
1559c1522
<         tuple<string,string,int> tupCorr = currentNetwork->getGraphTuple(i);
---
>         tuple<string,string,int> tupCorr = currentFilter->getCorrGraphTuple(i);
1597d1559
<     /*
1650d1611
<     */
1682c1643
<     vector<tuple<string,string,float> > graph = currentNetwork->getDeltasEdges(0);
---
>     vector<tuple<string,string,float> > graph = currentFilter->getDeltasEdges(0);
1886c1847
<     QFile pdbPath(currentNetwork->getCommPDBPath().c_str());
---
>     QFile pdbPath(currentFilter->getCommPDBPath().c_str());
1958d1918
<     /*
2032d1991
<     */
2037d1995
<     /*
2111d2068
<     */
2115c2072
<     unsigned int nrows = currentNetwork->getCommListSize();
---
>     unsigned int nrows = currentFilter->getCommListSize();
2121,2123c2078,2080
<     ui->lblMinLogP_2->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore()).c_str()));
<     ui->lblMinss_2->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction()).c_str()));
<     ui->lblDeltaFreq_2->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta()).c_str()));
---
>     ui->lblMinLogP_2->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore()).c_str()));
>     ui->lblMinss_2->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction()).c_str()));
>     ui->lblDeltaFreq_2->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta()).c_str()));
2127c2084
<         vector<string> residues = currentNetwork->getCommunitie(i);
---
>         vector<string> residues = currentFilter->getCommunitie(i);
2143c2100
<     unsigned int nrows = currentNetwork->getCommListSize();
---
>     unsigned int nrows = currentFilter->getCommListSize();
2156,2158c2113,2115
<     ui->lblMinLogP_2->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore()).c_str()));
<     ui->lblMinss_2->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction()).c_str()));
<     ui->lblDeltaFreq_2->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta()).c_str()));
---
>     ui->lblMinLogP_2->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore()).c_str()));
>     ui->lblMinss_2->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction()).c_str()));
>     ui->lblDeltaFreq_2->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta()).c_str()));
2162c2119
<         vector<string> residues = currentNetwork->getCommunitie(i);
---
>         vector<string> residues = currentFilter->getCommunitie(i);
2228c2185
<     unsigned int nrows = currentNetwork->getCommListSize();
---
>     unsigned int nrows = currentFilter->getCommListSize();
2241,2243c2198,2200
<     ui->lblMinLogP_2->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore()).c_str()));
<     ui->lblMinss_2->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction()).c_str()));
<     ui->lblDeltaFreq_2->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta()).c_str()));
---
>     ui->lblMinLogP_2->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore()).c_str()));
>     ui->lblMinss_2->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction()).c_str()));
>     ui->lblDeltaFreq_2->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta()).c_str()));
2247c2204
<         vector<string> residues = currentNetwork->getCommunitie(i);
---
>         vector<string> residues = currentFilter->getCommunitie(i);
2287,2289c2244,2246
<     ui->lblMinLogP_3->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore()).c_str()));
<     ui->lblMinss_3->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinssFraction()).c_str()));
<     ui->lblDeltaFreq_3->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta()).c_str()));
---
>     ui->lblMinLogP_3->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore()).c_str()));
>     ui->lblMinss_3->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinssFraction()).c_str()));
>     ui->lblDeltaFreq_3->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta()).c_str()));
2293c2250
<     vector<string> residues = currentNetwork->getResiduesComm(0);
---
>     vector<string> residues = currentFilter->getResiduesComm(0);
2305c2262
<     vector<float> corrAll = currentNetwork->getCommAll(0);
---
>     vector<float> corrAll = currentFilter->getCommAll(0);
2315c2272
<         vector<float> commRow = currentNetwork->getCommXRow(0,i);
---
>         vector<float> commRow = currentFilter->getCommXRow(0,i);
2340,2342c2297,2299
<     ui->lblMinLogP_4->setText("Minimum Score: " + QString::fromStdString(to_string(currentNetwork->getMinScore()).c_str()));
<     ui->lblMinss_4->setText("Minss Fraction: " + QString::fromStdString(to_string(currentNetwork->getMinScore()).c_str()));
<     ui->lblDeltaFreq_4->setText("Delta Frequence: " + QString::fromStdString(to_string(currentNetwork->getMinDelta()).c_str()));
---
>     ui->lblMinLogP_4->setText("Minimum Score: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore()).c_str()));
>     ui->lblMinss_4->setText("Minss Fraction: " + QString::fromStdString(to_string(currentFilter->getCorrMinScore()).c_str()));
>     ui->lblDeltaFreq_4->setText("Delta Frequence: " + QString::fromStdString(to_string(currentFilter->getCorrMinDelta()).c_str()));
2346c2303
<     vector<string> residues = currentNetwork->getResiduesCommPs(0);
---
>     vector<string> residues = currentFilter->getResiduesCommPs(0);
2357c2314
<         vector<int> commRow = currentNetwork->getCommPsRow(0,i);
---
>         vector<int> commRow = currentFilter->getCommPsRow(0,i);
2373c2330
<     QProgressDialog progress("Calculating adherence for each community", "Abort", 0,currentFilter->sequences.size()+currentNetwork->getNumOfUtilComms());
---
>     QProgressDialog progress("Calculating adherence for each community", "Abort", 0,currentFilter->sequences.size()+currentFilter->getNumOfUtilComms());
2377c2334
<     unsigned int nComm = currentNetwork->getNumOfUtilComms();
---
>     unsigned int nComm = currentFilter->getNumOfUtilComms();
2379a2337,2338
>     //currentAlign->printFrequencies();
> 
2392d2350
<             ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
2405d2362
<             ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
2414,2415c2371,2372
<             if(currentNetwork->Communities[j].aa.size() > 1){
<                 float psa = currentNetwork->PSA(i,j);
---
>             if(currentFilter->Communities[j].aa.size() > 1){
>                 float psa = currentFilter->PSA(i,j);
2431,2432c2388,2391
<     vector<string> conservedaa = currentFilter->getConsRes();
<     vector<float> dgs = currentFilter->getConservedDGs();
---
>     vector<char> conservedaa;
>     vector<int> conservedpos;
>     vector<float> conservedfreq;
>     float minCons = currentFilter->getConsMin();
2441a2401,2438
>     currentFilter->CalculateFrequencies();
> 
>     if(currentFilter->getWeightsSize() != 0){
>         //HENIKOFF BASED CONSERVATION
>         for(unsigned int i = 0; i < currentFilter->getDGsize(); i++){
>             float dG = currentFilter->getDGPosition(i);
> 
>             if(dG >= minCons){
>                 //FIND HIGHER FREQUENCY AA
>                 float hiFreq = 0;
>                 int hiAA = 0;
>                 for(unsigned int j = 1; j <= 20; j++){
>                     float freq = (float)currentFilter->frequencies[i][j]/((float)currentFilter->sequences.size());
>                     if(freq > hiFreq){
>                         hiFreq = freq;
>                         hiAA = j;
>                     }
>                 }
>                 conservedaa.push_back(num2aa(hiAA));
>                 conservedpos.push_back(i);
>                 conservedfreq.push_back(100.0*dG);
>             }
>         }
>     }else{
>         //FREQUENCY BASED CONSERVATION
>         for(unsigned int i = 0; i < currentFilter->frequencies.size()-2; i++){
>             for(unsigned int j = 1; j <= 20; j++){
>                 float freq = (float)currentFilter->frequencies[i][j]/((float)currentFilter->sequences.size());
>                 //printf("freq=%f / minCons=%f\n",freq,minCons);
>                 if(freq >= minCons){
>                     conservedaa.push_back(num2aa(j));
>                     conservedpos.push_back(i);
>                     conservedfreq.push_back(100.0*freq);
>                 }
>             }
>         }
>     }
> 
2450c2447
<         string textCab = conservedaa[i] + " (" + QString::number(dgs[i],'f',2).toStdString() + ")";
---
>         string textCab = conservedaa[i] + QString::number(conservedpos[i] + 1).toStdString() + " (" + QString::number(conservedfreq[i],'f',1).toStdString() + ")";
2461,2464c2458
<             string res = conservedaa[j];
<             char aa = res[0];
<             int pos = stoi(res.substr(1))-1;
<             if(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,pos,fullSequences) == 0){
---
>             if(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,conservedpos[j],fullSequences) == 0){
2470c2464
<                 if(fullSequences[refSeqs[i]][pos]==aa){
---
>                 if(fullSequences[refSeqs[i]][conservedpos[j]]==conservedaa[j]){
2472c2466
<                     string textItem = aa + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,pos,fullSequences) + GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                     string textItem = conservedaa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,conservedpos[j],fullSequences) + GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
2477c2471
<                     string textItem = fullSequences[refSeqs[i]][pos] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,pos,fullSequences) + GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                     string textItem = fullSequences[refSeqs[i]][conservedpos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,conservedpos[j],fullSequences) + GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
2492,2493c2486
<     if(currentFilter->frequencies.size() == 0)
<         currentFilter->CalculateFrequencies();
---
>     currentFilter->CalculateFrequencies();
2505,2507c2498,2500
<     ui->tableResiduesComm->setColumnCount(currentNetwork->Communities[0].pos.size());
<     for(unsigned int i = 0; i < currentNetwork->Communities[0].pos.size(); i++){
<         string textCab = currentNetwork->Communities[0].aa[i] + QString::number(currentNetwork->Communities[0].pos[i]+1).toStdString();
---
>     ui->tableResiduesComm->setColumnCount(currentFilter->Communities[0].pos.size());
>     for(unsigned int i = 0; i < currentFilter->Communities[0].pos.size(); i++){
>         string textCab = currentFilter->Communities[0].aa[i] + QString::number(currentFilter->Communities[0].pos[i]+1).toStdString();
2517,2518c2510,2511
<         for(unsigned int j = 0; j < currentNetwork->Communities[0].pos.size(); j++){
<             if(fullSequences[refSeqs[i]][currentNetwork->Communities[0].pos[j]]==currentNetwork->Communities[0].aa[j]){
---
>         for(unsigned int j = 0; j < currentFilter->Communities[0].pos.size(); j++){
>             if(fullSequences[refSeqs[i]][currentFilter->Communities[0].pos[j]]==currentFilter->Communities[0].aa[j]){
2520c2513
<                 string textItem = currentNetwork->Communities[0].aa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentNetwork->Communities[0].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                 string textItem = currentFilter->Communities[0].aa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentFilter->Communities[0].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
2525c2518
<                 if(fullSequences[refSeqs[i]][currentNetwork->Communities[0].pos[j]]=='-'){
---
>                 if(fullSequences[refSeqs[i]][currentFilter->Communities[0].pos[j]]=='-'){
2531c2524
<                     string textItem = fullSequences[refSeqs[i]][currentNetwork->Communities[0].pos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentNetwork->Communities[0].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                     string textItem = fullSequences[refSeqs[i]][currentFilter->Communities[0].pos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentFilter->Communities[0].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
2543a2537
> 
2545,2547c2539,2541
<     for(unsigned int i = 0; i < currentNetwork->getUniprotMinedSize(); i++){
<         if(currentNetwork->getUniprotEntryNofFeatures(i) > 0){
<             string prot = currentNetwork->getUniprotEntryName(i) + " [" + to_string(currentNetwork->getUniprotEntryNofFeatures(i)) + "]";
---
>     for(unsigned int i = 0; i < currentFilter->getUniprotMinedSize(); i++){
>         if(currentFilter->getUniprotEntryNofFeatures(i) > 0){
>             string prot = currentFilter->getUniprotEntryName(i) + " [" + to_string(currentFilter->getUniprotEntryNofFeatures(i)) + "]";
2554c2548
<     unsigned int nrows = currentNetwork->getCommListSize();
---
>     unsigned int nrows = currentFilter->getCommListSize();
2559c2553
<         vector<string> residues = currentNetwork->getCommunitie(i);
---
>         vector<string> residues = currentFilter->getCommunitie(i);
2566c2560
<             int nOfResidues = currentNetwork->getResidueFeaturesByCommCount(residues[j]);
---
>             int nOfResidues = currentFilter->getResidueFeaturesByCommCount(residues[j]);
2575c2569,2570
<     vector<string> consRes = currentFilter->getConsRes();
---
>     float minCons = currentFilter->getConsMin();
>     vector<string> consRes = currentFilter->getConsRes(minCons);
2583c2578
<             int nOfResidues = currentNetwork->getResidueFeaturesByCommCount(consRes[j]);
---
>             int nOfResidues = currentFilter->getResidueFeaturesByCommCount(consRes[j]);
3600c3595,3600
<     //Verifica qual tela estÃ¡ aberta e qual serÃ¡ a proxima tela a ser exibida
---
>     //ui->cmdBack->setEnabled(false);
>     ui->listWidget->setEnabled(true);
>     ui->listWidget2->setEnabled(true);
>     //ui->cmdNextResult->setVisible(false);
>     //ui->cmdBackResult->setVisible(false);
> 
3671a3672
>     //ui->cmdBack->setEnabled(true);
3676c3677,3678
<     //Verifica qual tela estÃ¡ aberta e qual serÃ¡ a proxima tela a ser exibida
---
>     //ui->cmdAdvance->setEnabled(false);
> 
3701c3703
<         if(ui->listWidget2->topLevelItemCount() < 2){
---
>         if(ui->listWidget2->count() < 2){
3848c3850
<     emit ui->listWidget->activated(ui->listWidget->currentIndex());//VERIFICAR NECESSIDADE
---
>     emit ui->listWidget->activated(ui->listWidget->currentIndex());
4047,4048c4049,4050
<     for(unsigned int i = 0; i < ui->listWidget2->topLevelItemCount(); i++){
<         if(ui->txtFilterName->text() == ui->listWidget2->topLevelItem(i)->text(0) && ui->cmbFilterMethod->currentIndex() != 2){
---
>     for(unsigned int i = 0; i < ui->listWidget2->count(); i++){
>         if(ui->txtFilterName->text() == ui->listWidget2->item(i)->text() && ui->cmbFilterMethod->currentIndex() != 2){
4113d4114
<     //HMM
4116,4118c4117,4118
<             ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
<             //ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
<             //emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
---
>             ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
>             emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
4120c4120
<     }else if(method == 1){//RefSeq
---
>     }else if(method == 1){
4122,4124c4122,4123
<             ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
<             //ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
<             //emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
---
>             ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
>             emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
4126c4125
<     }else if(method == 2){//Henikoff
---
>     }else if(method == 2){
4128,4130c4127,4128
<             ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
<             //ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
<             //emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
---
>             ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
>             emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
4133a4132,4133
> 
> 
4238a4239,4241
>     vector<tuple<string, string> > contactResidues;
> 
>     //Chamar PCalc
4244,4261d4246
<     //Verifica se essa network jÃ¡ existe neste filtro
<     stringstream ss;
<     ss << fixed << setprecision(2) << minssfraction;
<     string strMinss = ss.str();
<     ss.str(std::string());
<     ss << fixed << setprecision(2) << mindeltafreq;
<     string strDelta = ss.str();
<     string name = to_string(minlogp) + "_" + strMinss + "_" + strDelta;
<     if(currentFilter->networkExists(name)){
<         QMessageBox::warning(this,"Error","A network with these parameters already exists.");
<         ui->txtMinScore->setFocus();
<         ui->cmdCorrelation->setEnabled(true);
<         return;
<     }
< 
<     //Cria nova rede
<     Network *net = new Network(&currentFilter->sequences,&currentFilter->sequencenames,minlogp,minssfraction,mindeltafreq);
< 
4263c4248
<     net->alignment2UpperCase();
---
>     currentFilter->alignment2UpperCase();
4265,4266c4250,4252
<     //Chama funÃ§Ã£o para calcular correlaÃ§Ãµes e criar a rede
<     this->pcalc(net,minlogp,minssfraction,mindeltafreq);
---
>     currentFilter->setCorrMinScore(minlogp);
>     currentFilter->setCorrMinDelta(mindeltafreq);
>     currentFilter->setCorrMinssFraction(minssfraction);
4268,4269c4254,4257
<     //Chama funÃ§ao para decompor em comunidades
<     bool ok = this->trivcomm(net);
---
>     this->pcalc(minlogp,minssfraction,mindeltafreq);
> 
>     //Chamar Trivcomm
>     bool ok = this->trivcomm();
4271d4258
<         QMessageBox::warning(this,"Warning","No correlation was found.");
4276,4283d4262
<     //Adiciona na lista de comunidades
<     QTreeWidgetItem *parent = this->getFilterItem();
<     QTreeWidgetItem *child = new QTreeWidgetItem();
<     child->setText(0,net->getName().c_str());
<     parent->addChild(child);
<     currentFilter->addNetwork(net);
<     currentNetwork = net;
< 
4294c4273
<             QMessageBox::warning(this,"Warning","To generate communities visualization, you must inform a PDB");
---
>             QMessageBox::warning(this,"Warning","To generate communities visualization, you must set a PDB id");
4316c4295
<         vector<tuple<int,float> > commvec = currentNetwork->createCommuntitiesVector();
---
>         vector<tuple<int,float> > commvec = currentFilter->createCommuntitiesVector(pdb->getRefSeqId());
4318c4297
<         currentNetwork->setCommPDBPath(filename.toStdString());
---
>         currentFilter->setCommPDBPath(filename.toStdString());
4321c4300
<     currentNetwork->setPDB(pdbid);
---
>     currentFilter->setCorrPDB(pdbid);
4394c4373
<         if(currentNetwork->getGraphSize() == 0){
---
>         if(currentFilter->getCorrGraphSize() == 0){
4409c4388
<         if(currentNetwork->getCommListSize() == 0){
---
>         if(currentFilter->getCommListSize() == 0){
4424c4403
<         if(currentNetwork->getNumOfUtilComms() == 0){
---
>         if(currentFilter->getNumOfUtilComms() == 0){
4439c4418
<         if(currentNetwork->getNumOfUtilComms() == 0){
---
>         if(currentFilter->getNumOfUtilComms() == 0){
4454c4433
<         if(currentNetwork->getNumOfUtilComms() == 0){
---
>         if(currentFilter->getNumOfUtilComms() == 0){
4475c4454
<         if(currentNetwork->getNumOfUtilComms() == 0){
---
>         if(currentFilter->getNumOfUtilComms() == 0){
4490c4469
<         if(currentNetwork->getUniprotMinedSize() == 0){
---
>         if(currentFilter->getUniprotMinedSize() == 0){
4506c4485
<         if(currentNetwork->getUniprotMinedSize() == 0){
---
>         if(currentFilter->getUniprotMinedSize() == 0){
4534c4513
<         if(currentNetwork->getCommPDBPath() == ""){
---
>         if(currentFilter->getCommPDBPath() == ""){
4546c4525
<         if(currentNetwork->getGraphSize() == 0){
---
>         if(currentFilter->getCorrGraphSize() == 0){
4558c4537
<         if(currentNetwork->getGraphSize() == 0){
---
>         if(currentFilter->getCorrGraphSize() == 0){
4570c4549
<         if(currentNetwork->getDeltasSize() == 0){
---
>         if(currentFilter->getDeltasSize() == 0){
4597d4575
<     if(currentRow < 0 || currentRow > ui->listWidget->count()) return;
4641a4620
>         //ui->lstRefSeqs->addItem(QString::fromStdString(splitVec[0]));
4646a4626,4635
>     if(ui->stackedWidget->currentIndex() == STACK_MANAGE_COMMS){
>         ui->cmbComm->clear();
>         unsigned int nOfComms = currentFilter->getCommListSize();
> 
>         for(unsigned int j = 1; j <= nOfComms; j++)
>             ui->cmbComm->addItem(QString::number(j));
>     }else if(ui->stackedWidget->currentIndex() == STACK_RESULTS){
>         this->updateResultsViews();
>     }
> 
4655,4663c4644
<         QTreeWidgetItem *item = new QTreeWidgetItem(ui->listWidget2);
<         item->setText(0,filter->getName().c_str());
<         filter->setQtreeWidgetItem(item);
<         for(unsigned int k = 0; k < filter->countNetworks(); k++){
<             Network *net = filter->getNetwork(k);
<             QTreeWidgetItem *item2 = new QTreeWidgetItem();
<             item2->setText(0,net->getName().c_str());
<             item->addChild(item2);
<         }
---
>         ui->listWidget2->addItem(filter->getName().c_str());
4666c4647
<     ui->listWidget2->setCurrentItem(ui->listWidget2->itemAt(0,0));
---
>     ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
4668,4669c4649
<     //EstÃ¡ sendo chamado automÃ¡ticamente pelo setCurrentItem
<     //emit ui->listWidget2->currentItemChanged(ui->listWidget2->currentItem(),NULL);
---
>     emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
4671c4651,4654
<     progress.close();
---
>     progress.hide();
> 
>     //ui->cmbRefSeq_2->setCurrentIndex(1);
>     //ui->cmbRefSeq_3->setCurrentIndex(1);
4724c4707
<     int nComm = currentNetwork->getNumOfUtilComms();
---
>     int nComm = currentFilter->getNumOfUtilComms();
4735c4718
<     vector<string> residues = currentNetwork->getResiduesComm(currComm);
---
>     vector<string> residues = currentFilter->getResiduesComm(currComm);
4747c4730
<     vector<float> corrAll = currentNetwork->getCommAll(currComm);
---
>     vector<float> corrAll = currentFilter->getCommAll(currComm);
4757c4740
<         vector<float> commRow = currentNetwork->getCommXRow(currComm,i);
---
>         vector<float> commRow = currentFilter->getCommXRow(currComm,i);
4790c4773
<     int nComm = currentNetwork->getNumOfUtilComms();
---
>     int nComm = currentFilter->getNumOfUtilComms();
4801c4784
<     vector<string> residues = currentNetwork->getResiduesComm(currComm-1);
---
>     vector<string> residues = currentFilter->getResiduesComm(currComm-1);
4812c4795
<     vector<float> corrAll = currentNetwork->getCommAll(currComm-1);
---
>     vector<float> corrAll = currentFilter->getCommAll(currComm-1);
4822c4805
<         vector<float> commRow = currentNetwork->getCommXRow(currComm-1,i);
---
>         vector<float> commRow = currentFilter->getCommXRow(currComm-1,i);
4855c4838
<     int nComm = currentNetwork->getNumOfUtilComms();
---
>     int nComm = currentFilter->getNumOfUtilComms();
4866c4849
<     vector<string> residues = currentNetwork->getResiduesCommPs(currComm);
---
>     vector<string> residues = currentFilter->getResiduesCommPs(currComm);
4877c4860
<         vector<int> commRow = currentNetwork->getCommPsRow(currComm,i);
---
>         vector<int> commRow = currentFilter->getCommPsRow(currComm,i);
4907c4890
<     int nComm = currentNetwork->getNumOfUtilComms();
---
>     int nComm = currentFilter->getNumOfUtilComms();
4918c4901
<     vector<string> residues = currentNetwork->getResiduesCommPs(currComm -1);
---
>     vector<string> residues = currentFilter->getResiduesCommPs(currComm -1);
4929c4912
<         vector<int> commRow = currentNetwork->getCommPsRow(currComm-1,i);
---
>         vector<int> commRow = currentFilter->getCommPsRow(currComm-1,i);
4961c4944
<     int nComm = currentNetwork->Communities.size();
---
>     int nComm = currentFilter->Communities.size();
4978,4980c4961,4963
<     ui->tableResiduesComm->setColumnCount(currentNetwork->Communities[currComm].pos.size());
<     for(unsigned int i = 0; i < currentNetwork->Communities[currComm].pos.size(); i++){
<         string textCab = currentNetwork->Communities[currComm].aa[i] + QString::number(currentNetwork->Communities[currComm].pos[i]+1).toStdString();
---
>     ui->tableResiduesComm->setColumnCount(currentFilter->Communities[currComm].pos.size());
>     for(unsigned int i = 0; i < currentFilter->Communities[currComm].pos.size(); i++){
>         string textCab = currentFilter->Communities[currComm].aa[i] + QString::number(currentFilter->Communities[currComm].pos[i]+1).toStdString();
4991,4992c4974,4975
<         for(unsigned int j = 0; j < currentNetwork->Communities[currComm].pos.size(); j++){
<             if(fullSequences[refSeqs[i]][currentNetwork->Communities[currComm].pos[j]]==currentNetwork->Communities[currComm].aa[j]){
---
>         for(unsigned int j = 0; j < currentFilter->Communities[currComm].pos.size(); j++){
>             if(fullSequences[refSeqs[i]][currentFilter->Communities[currComm].pos[j]]==currentFilter->Communities[currComm].aa[j]){
4994c4977
<                 string textItem = currentNetwork->Communities[currComm].aa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentNetwork->Communities[currComm].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                 string textItem = currentFilter->Communities[currComm].aa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentFilter->Communities[currComm].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
4999c4982
<                 if(fullSequences[refSeqs[i]][currentNetwork->Communities[currComm].pos[j]]=='-'){
---
>                 if(fullSequences[refSeqs[i]][currentFilter->Communities[currComm].pos[j]]=='-'){
5005c4988
<                     string textItem = fullSequences[refSeqs[i]][currentNetwork->Communities[currComm].pos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentNetwork->Communities[currComm].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                     string textItem = fullSequences[refSeqs[i]][currentFilter->Communities[currComm].pos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentFilter->Communities[currComm].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
5035c5018
<     int nComm = currentNetwork->Communities.size();
---
>     int nComm = currentFilter->Communities.size();
5052,5054c5035,5037
<     ui->tableResiduesComm->setColumnCount(currentNetwork->Communities[currComm -1].pos.size());
<     for(unsigned int i = 0; i < currentNetwork->Communities[currComm -1].pos.size(); i++){
<         string textCab = currentNetwork->Communities[currComm -1].aa[i] + QString::number(currentNetwork->Communities[currComm-1].pos[i]+1).toStdString();
---
>     ui->tableResiduesComm->setColumnCount(currentFilter->Communities[currComm -1].pos.size());
>     for(unsigned int i = 0; i < currentFilter->Communities[currComm -1].pos.size(); i++){
>         string textCab = currentFilter->Communities[currComm -1].aa[i] + QString::number(currentFilter->Communities[currComm-1].pos[i]+1).toStdString();
5065,5066c5048,5049
<         for(unsigned int j = 0; j < currentNetwork->Communities[currComm -1].pos.size(); j++){
<             if(fullSequences[refSeqs[i]][currentNetwork->Communities[currComm-1].pos[j]]==currentNetwork->Communities[currComm-1].aa[j]){
---
>         for(unsigned int j = 0; j < currentFilter->Communities[currComm -1].pos.size(); j++){
>             if(fullSequences[refSeqs[i]][currentFilter->Communities[currComm-1].pos[j]]==currentFilter->Communities[currComm-1].aa[j]){
5068c5051
<                 string textItem = currentNetwork->Communities[currComm-1].aa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentNetwork->Communities[currComm-1].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                 string textItem = currentFilter->Communities[currComm-1].aa[j] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentFilter->Communities[currComm-1].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
5073c5056
<                 if(fullSequences[refSeqs[i]][currentNetwork->Communities[currComm-1].pos[j]]=='-'){
---
>                 if(fullSequences[refSeqs[i]][currentFilter->Communities[currComm-1].pos[j]]=='-'){
5079c5062
<                     string textItem = fullSequences[refSeqs[i]][currentNetwork->Communities[currComm-1].pos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentNetwork->Communities[currComm-1].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
---
>                     string textItem = fullSequences[refSeqs[i]][currentFilter->Communities[currComm-1].pos[j]] + QString::number(currentFilter->AlignNumbering2Sequence2(refSeqs[i]+1,currentFilter->Communities[currComm-1].pos[j],fullSequences)+GetOffsetFromSeqName(fullAlignment[refSeqs[i]])).toStdString();
5167,5180d5149
<                             }else if(reader.isStartElement() && reader.name() == "weights"){
<                                 vector<float> weights;
<                                 while(!reader.atEnd()){
<                                     reader.readNext();
< 
<                                     if(reader.isStartElement() && reader.name() == "value"){
<                                         float value = reader.readElementText().toFloat();
<                                         weights.push_back(value);
<                                     }else if(reader.isEndElement() && reader.name() == "weights"){
<                                         filter->setWeights(weights);
<                                         break;
<                                     }
<                                 }
< 
5189c5158
<                                         //Atualizar no updateResults
---
>                                         //this->updateRefSeqsCompleters();
5193c5162,5163
<                             }else if(reader.isStartElement() && reader.name() == "conservation"){
---
>                             }else if(reader.name() == "conservation"){
>                                 vector<float> dg;
5202c5172,5179
<                                                 if(reader.name() == "minimum"){
---
>                                                 if(reader.name() == "pdb"){
>                                                     string pdb = reader.readElementText().toStdString();
>                                                     filter->setConsPDB(pdb);
>                                                 }else if(reader.name() == "offset"){
>                                                     //old code
>                                                     //int offset = reader.readElementText().toInt();
>                                                     //filter->setConsOffset(offset);
>                                                 }else if(reader.name() == "minimum"){
5205,5210c5182,5185
<                                                 }else if(reader.name() == "alpha"){
<                                                     float alpha = reader.readElementText().toFloat();
<                                                     filter->setConsAlpha(alpha);
<                                                 }else if(reader.name() == "beta"){
<                                                     float beta = reader.readElementText().toFloat();
<                                                     filter->setConsBeta(beta);
---
>                                                 }else if(reader.name() == "refseq"){
>                                                     //old
>                                                     //int ref = reader.readElementText().toInt();
>                                                     //filter->setConsRefseq(ref);
5216c5191,5193
<                                     }else if(reader.isEndElement() && reader.name() == "conservation"){
---
>                                     }else if(reader.isStartElement() && reader.name() == "positions"){
>                                         vector<int> freq;
>                                         vector<float> freqperc;
5218,5222c5195,5196
<                                         filter->CalculateFrequencies();
<                                         if(filter->getWeightsSize() == 0) filter->dGCalculation();
<                                         else filter->dGCalculation(filter->getConsAlpha(),filter->getConsBeta());
<                                         filter->dGWrite();
<                                         filter->FreqWrite();
---
>                                         while(!reader.atEnd()){
>                                             reader.readNext();
5223a5198,5224
>                                             if(reader.isStartElement() && reader.name() == "pos"){
>                                                 while(!reader.atEnd()){
>                                                     reader.readNext();
> 
>                                                     if(reader.isStartElement()){
>                                                         if(reader.name() == "deltaG")
>                                                             dg.push_back(reader.readElementText().toFloat());
>                                                         else if(reader.name() == "frequence")
>                                                             freq.push_back(reader.readElementText().toInt());
>                                                         else if(reader.name() == "percent")
>                                                             freqperc.push_back(reader.readElementText().toFloat());
>                                                     }else if(reader.isEndElement() && reader.name() == "pos"){
>                                                         filter->addConsFreqRow(freq);
>                                                         filter->addConsFreqPercRow(freqperc);
>                                                         freq.clear();
>                                                         freqperc.clear();
>                                                         break;
>                                                     }
>                                                 }
>                                             }else if(reader.isEndElement() && reader.name() == "positions")
>                                                 break;
>                                         }
>                                     }else if(reader.isEndElement() && reader.name() == "conservation"){
>                                         filter->setConsDG(dg);
>                                         //filter->printConsFreq();
>                                         //printf("\n\n");
>                                         //filter->printConsFreqPerc();
5244,5266c5245,5270
<                                     if(reader.isStartElement() && reader.name() == "network"){
<                                         Network *net = new Network(&filter->sequences,&filter->sequencenames);
<                                         while(!reader.atEnd()){
<                                             reader.readNext();
< 
<                                             if(reader.isStartElement()){
<                                                 if(reader.name() == "parameters"){
<                                                     while(!reader.atEnd()){
<                                                         reader.readNext();
< 
<                                                         if(reader.isStartElement()){
<                                                             if(reader.name() == "min_score"){
<                                                                 float score = reader.readElementText().toFloat();
<                                                                 net->setMinScore(score);
<                                                             }else if(reader.name() == "minss"){
<                                                                 float minss = reader.readElementText().toFloat();
<                                                                 net->setMinssFraction(minss);
<                                                             }else if(reader.name() == "min_delta"){
<                                                                 float delta = reader.readElementText().toFloat();
<                                                                 net->setMinDelta(delta);
<                                                             }
<                                                         }else if(reader.isEndElement() && reader.name() == "parameters")
<                                                             break;
---
>                                     if(reader.isStartElement()){
>                                         if(reader.name() == "parameters"){
>                                             while(!reader.atEnd()){
>                                                 reader.readNext();
> 
>                                                 if(reader.isStartElement()){
>                                                     if(reader.name() == "pdb"){
>                                                         string pdb = reader.readElementText().toStdString();
>                                                         filter->setCorrPDB(pdb);
>                                                     }else if(reader.name() == "offset"){
>                                                         //old
>                                                         //int offset = reader.readElementText().toInt();
>                                                         //filter->setCorrOffset(offset);
>                                                     }else if(reader.name() == "min_score"){
>                                                         float score = reader.readElementText().toFloat();
>                                                         filter->setCorrMinScore(score);
>                                                     }else if(reader.name() == "minss"){
>                                                         float minss = reader.readElementText().toFloat();
>                                                         filter->setCorrMinssFraction(minss);
>                                                     }else if(reader.name() == "min_delta"){
>                                                         float delta = reader.readElementText().toFloat();
>                                                         filter->setCorrMinDelta(delta);
>                                                     }else if(reader.name() == "refseq"){
>                                                         //old
>                                                         //int refseq = reader.readElementText().toInt();
>                                                         //filter->setCorrRefSeq(refseq);
5268,5270c5272,5289
<                                                 }else if(reader.name() == "graph"){
<                                                     while(!reader.atEnd()){
<                                                         reader.readNext();
---
>                                                 }else if(reader.isEndElement() && reader.name() == "parameters")
>                                                     break;
>                                             }
>                                         }else if(reader.name() == "graph"){
>                                             while(!reader.atEnd()){
>                                                 reader.readNext();
> 
>                                                 if(reader.isStartElement() && reader.name() == "edge"){
>                                                     string v1 = reader.attributes().value("v1").toString().toStdString();
>                                                     string v2 = reader.attributes().value("v2").toString().toStdString();
>                                                     int score = reader.readElementText().toInt();
> 
>                                                     filter->addCorrEdge(v1,v2,score);
>                                                 }else if(reader.isEndElement() && reader.name() == "graph")
>                                                     break;
>                                             }
>                                         }else if(reader.name() == "communities"){
>                                             vector<string> comms;
5272,5275c5291,5292
<                                                         if(reader.isStartElement() && reader.name() == "edge"){
<                                                             string v1 = reader.attributes().value("v1").toString().toStdString();
<                                                             string v2 = reader.attributes().value("v2").toString().toStdString();
<                                                             int score = reader.readElementText().toInt();
---
>                                             while(!reader.atEnd()){
>                                                 reader.readNext();
5277,5282c5294,5296
<                                                             net->addCorrEdge(v1,v2,score);
<                                                         }else if(reader.isEndElement() && reader.name() == "graph")
<                                                             break;
<                                                     }
<                                                 }else if(reader.name() == "communities"){
<                                                     vector<string> comms;
---
>                                                 if(reader.isStartElement() && reader.name() == "community"){
>                                                     comms.clear();
>                                                     string node;
5287,5302c5301,5305
<                                                         if(reader.isStartElement() && reader.name() == "community"){
<                                                             comms.clear();
<                                                             string node;
< 
<                                                             while(!reader.atEnd()){
<                                                                 reader.readNext();
< 
<                                                                 if(reader.isStartElement() && reader.name() == "node"){
<                                                                     node = reader.readElementText().toStdString();
<                                                                     comms.push_back(node);
<                                                                 }else if(reader.isEndElement() && reader.name() == "community"){
<                                                                     net->addCommunity(comms);
<                                                                     break;
<                                                                 }
<                                                             }
<                                                         }else if(reader.isEndElement() && reader.name() == "communities")
---
>                                                         if(reader.isStartElement() && reader.name() == "node"){
>                                                             node = reader.readElementText().toStdString();
>                                                             comms.push_back(node);
>                                                         }else if(reader.isEndElement() && reader.name() == "community"){
>                                                             filter->addCommunity(comms);
5303a5307
>                                                         }
5305,5307c5309,5332
<                                                 }else if(reader.name() == "output"){
<                                                     vector<string> residues;
<                                                     vector<string> residuesPs;
---
>                                                 }else if(reader.isEndElement() && reader.name() == "communities")
>                                                     break;
>                                             }
>                                         }else if(reader.name() == "output"){
>                                             vector<string> residues;
>                                             vector<string> residuesPs;
> 
>                                             while(!reader.atEnd()){
>                                                 reader.readNext();
> 
>                                                 if(reader.isStartElement()){
>                                                     if(reader.name() == "community"){
>                                                         vector<float> resAll;
>                                                         vector<vector<float> > commX;
>                                                         residues.clear();
> 
>                                                         while(!reader.atEnd()){
>                                                             reader.readNext();
> 
>                                                             if(reader.isStartElement() && reader.name() == "column"){
>                                                                 string res = reader.readElementText().toStdString();
>                                                                 if(res != "ALL") residues.push_back(res);
>                                                             }else if(reader.isStartElement() && reader.name() == "row"){
>                                                                 vector<float> values;
5309,5310c5334
<                                                     while(!reader.atEnd()){
<                                                         reader.readNext();
---
>                                                                 resAll.push_back(reader.attributes().at(1).value().toFloat());
5312,5362c5336,5337
<                                                         if(reader.isStartElement()){
<                                                             if(reader.name() == "community"){
<                                                                 vector<float> resAll;
<                                                                 vector<vector<float> > commX;
<                                                                 residues.clear();
< 
<                                                                 while(!reader.atEnd()){
<                                                                     reader.readNext();
< 
<                                                                     if(reader.isStartElement() && reader.name() == "column"){
<                                                                         string res = reader.readElementText().toStdString();
<                                                                         if(res != "ALL") residues.push_back(res);
<                                                                     }else if(reader.isStartElement() && reader.name() == "row"){
<                                                                         vector<float> values;
< 
<                                                                         resAll.push_back(reader.attributes().at(1).value().toFloat());
< 
<                                                                         for(unsigned int i = 2; i < reader.attributes().size(); i++){
<                                                                             values.push_back(reader.attributes().at(i).value().toFloat()/100);
<                                                                         }
< 
<                                                                         commX.push_back(values);
<                                                                     }else if(reader.isEndElement() && reader.name() == "community"){
<                                                                         net->addResiduesComm(residues);
<                                                                         net->addCommXAll(resAll);
<                                                                         net->addCommX(commX);
<                                                                         break;
<                                                                     }
<                                                                 }
<                                                             }else if(reader.name() == "logP"){
<                                                                 vector<vector<int> > commXPs;
<                                                                 residuesPs.clear();
< 
<                                                                 while(!reader.atEnd()){
<                                                                     reader.readNext();
< 
<                                                                     if(reader.isStartElement() && reader.name() == "column"){
<                                                                         residuesPs.push_back(reader.readElementText().toStdString());
<                                                                     }else if(reader.isStartElement() && reader.name() == "row"){
<                                                                         vector<int> values;
< 
<                                                                         for(unsigned int i = 1; i < reader.attributes().size(); i++){
<                                                                             values.push_back(reader.attributes().at(i).value().toInt());
<                                                                         }
< 
<                                                                         commXPs.push_back(values);
<                                                                     }else if(reader.isEndElement() && reader.name() == "logP"){
<                                                                         net->addResiduesCommPs(residuesPs);
<                                                                         net->addCommXPs(commXPs);
<                                                                         break;
<                                                                     }
---
>                                                                 for(unsigned int i = 2; i < reader.attributes().size(); i++){
>                                                                     values.push_back(reader.attributes().at(i).value().toFloat()/100);
5364,5370d5338
<                                                             }
<                                                         }else if(reader.isEndElement() && reader.name() == "output")
<                                                             break;
<                                                     }
<                                                 }else if(reader.name() == "deltas"){
<                                                     while(!reader.atEnd()){
<                                                         reader.readNext();
5372,5373c5340,5358
<                                                         if(reader.isStartElement() && reader.name() == "row"){
<                                                             vector<float> deltaLines;
---
>                                                                 commX.push_back(values);
>                                                             }else if(reader.isEndElement() && reader.name() == "community"){
>                                                                 filter->addResiduesComm(residues);
>                                                                 filter->addCommXAll(resAll);
>                                                                 filter->addCommX(commX);
>                                                                 break;
>                                                             }
>                                                         }
>                                                     }else if(reader.name() == "logP"){
>                                                         vector<vector<int> > commXPs;
>                                                         residuesPs.clear();
> 
>                                                         while(!reader.atEnd()){
>                                                             reader.readNext();
> 
>                                                             if(reader.isStartElement() && reader.name() == "column"){
>                                                                 residuesPs.push_back(reader.readElementText().toStdString());
>                                                             }else if(reader.isStartElement() && reader.name() == "row"){
>                                                                 vector<int> values;
5375,5376c5360,5362
<                                                             for(unsigned int i = 0; i < reader.attributes().size(); i++)
<                                                                 deltaLines.push_back(reader.attributes().at(i).value().toFloat());
---
>                                                                 for(unsigned int i = 1; i < reader.attributes().size(); i++){
>                                                                     values.push_back(reader.attributes().at(i).value().toInt());
>                                                                 }
5378,5380c5364,5369
<                                                             net->addDeltaLine(deltaLines);
<                                                         }else if(reader.isEndElement() && reader.name() == "deltas"){
<                                                             break;
---
>                                                                 commXPs.push_back(values);
>                                                             }else if(reader.isEndElement() && reader.name() == "logP"){
>                                                                 filter->addResiduesCommPs(residuesPs);
>                                                                 filter->addCommXPs(commXPs);
>                                                                 break;
>                                                             }
5382a5372,5387
>                                                 }else if(reader.isEndElement() && reader.name() == "output")
>                                                     break;
>                                             }
>                                         }else if(reader.name() == "deltas"){
>                                             while(!reader.atEnd()){
>                                                 reader.readNext();
> 
>                                                 if(reader.isStartElement() && reader.name() == "row"){
>                                                     vector<float> deltaLines;
> 
>                                                     for(unsigned int i = 0; i < reader.attributes().size(); i++)
>                                                         deltaLines.push_back(reader.attributes().at(i).value().toFloat());
> 
>                                                     filter->addDeltaLine(deltaLines);
>                                                 }else if(reader.isEndElement() && reader.name() == "deltas"){
>                                                     break;
5384,5394d5388
<                                             }else if(reader.isEndElement() && reader.name() == "network"){
<                                                 stringstream ss;
<                                                 ss << fixed << setprecision(2) << net->getMinssFraction();
<                                                 string strMinss = ss.str();
<                                                 ss.str(std::string());
<                                                 ss << fixed << setprecision(2) << net->getMinDelta();
<                                                 string strDelta = ss.str();
<                                                 string name = to_string(net->getMinScore()) + "_" + strMinss + "_" + strDelta;
<                                                 net->setName(name);
<                                                 filter->addNetwork(net);
<                                                 break;
5434,5435c5428
< 
<     this->updateResultsViews();
---
>     emit ui->listWidget->activated(ui->listWidget->currentIndex());
5442a5436,5438
>     Filter *filter = currentAlign->getFilterByName(ui->listWidget2->currentItem()->text().toStdString());
>     currentFilter = filter;
> 
5448,5479c5444,5446
<     QString name = ui->listWidget2->currentItem()->text(0);
<     if(!ui->listWidget2->currentItem()->parent()){
<         //Remover um filtro
<         QMessageBox::StandardButton reply;
<         reply = QMessageBox::question(this, "Warning", "Do you really want to remove the sub-alignment " + name + "?", QMessageBox::Yes|QMessageBox::No);
<         if (reply == QMessageBox::Yes) {
<             Filter *filter = currentAlign->getFilterByName(ui->listWidget2->currentItem()->text(0).toStdString());
<             currentFilter = filter;
< 
<             if(currentFilter->getType() == 9){
<                 QMessageBox::warning(this,"Error","You cant remove full alignment.");
<                 return;
<             }
< 
<             currentAlign->removeFilter(name.toStdString());
<             currentFilter = NULL;
<             currentNetwork = NULL;
<             delete ui->listWidget2->currentItem();
<             ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
<         }
<     }else{
<         //Remover uma network
<         QMessageBox::StandardButton reply;
<         reply = QMessageBox::question(this, "Warning", "Do you really want to remove the network " + name + "?", QMessageBox::Yes|QMessageBox::No);
<         if (reply == QMessageBox::Yes) {
<             //Network* net = currentFilter->getNetworkByName(ui->listWidget2->currentItem()->text(0).toStdString());
< 
<             currentFilter->removeNetwork(name.toStdString());
<             currentNetwork = NULL;
<             delete ui->listWidget2->currentItem();
<             ui->listWidget2->setCurrentItem(ui->listWidget2->topLevelItem(ui->listWidget2->topLevelItemCount()-1));
<         }
---
>     if(currentFilter->getType() == 9){
>         QMessageBox::warning(this,"Error","You cant remove full alignment.");
>         return;
5480a5448,5453
> 
>     int pos = ui->listWidget2->currentIndex().row();
>     currentAlign->removeFilter(ui->listWidget2->currentItem()->text().toStdString());
>     delete ui->listWidget2->item(pos);
>     ui->listWidget2->setCurrentRow(0);
>     emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
5901c5874
<         QMessageBox::warning(this,"Warning","You must select a alignment to export.");
---
>         QMessageBox::warning(this,"Error","You must select a alignment to export.");
5906c5879
<         QMessageBox::warning(this,"Warning","You must select an alignment to export.");
---
>         QMessageBox::warning(this,"Error","You must select an filter to export");
5909,5911c5882,5884
<     if(!currentNetwork){
<         QMessageBox::warning(this,"Warning","You must run correlation analysis.");
<         ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
---
> 
>     if(currentFilter->getCorrelationGraphSize() == 0){
>         QMessageBox::warning(this,"Warning","You must run correlation before export this result");
5920c5893
<     currentNetwork->exportCorrGraph(filename,0);
---
>     currentFilter->exportCorrGraph(filename,0);
5933,5935c5906,5908
<     if(!currentNetwork){
<         QMessageBox::warning(this,"Warning","You must run correlation analysis.");
<         ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
---
> 
>     if(currentFilter->getCorrelationGraphSize() == 0){
>         QMessageBox::warning(this,"Warning","You must run correlation before export this result");
5957,5959c5930,5932
<     if(!currentNetwork){
<         QMessageBox::warning(this,"Warning","You must run correlation analysis.");
<         ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
---
> 
>     if(currentFilter->getCorrelationGraphSize() == 0){
>         QMessageBox::warning(this,"Warning","You must run correlation before export this result");
5972d5944
<     /*
5994d5965
<     */
5998d5968
<     /*
6020d5989
<     */
6024d5992
<     /*
6046d6013
<     */
6050d6016
<     /*
6072d6037
<     */
6076d6040
<     /*
6098d6061
<     */
6102d6064
<     /*
6124d6085
<     */
6128d6088
<     /*
6150d6109
<     */
6154d6112
<     /*
6176d6133
<     */
6180d6136
<     /*
6202d6157
<     */
6206d6160
<     /*
6228d6181
<     */
6232d6184
<     /*
6254d6205
<     */
6258d6208
<     /*
6280d6229
<     */
6284d6232
<     /*
6310d6257
<     */
6314d6260
<     /*
6340d6285
<     */
6344d6288
<     /*
6370d6313
<     */
6399,6405d6341
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
< 
6414,6419d6349
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
6428,6433d6357
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
6442,6447d6365
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
6464,6469d6381
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
6481,6486d6392
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
6496,6501d6401
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
6507c6407
<     if(currentNetwork->getCommListSize() > 0){
---
>     if(currentFilter->getCommListSize() > 0){
6512c6412
<     if(currentFilter->getConsFreqSize() == 0 && currentNetwork->getCommListSize() == 0){
---
>     if(currentFilter->getConsFreqSize() == 0 && currentFilter->getCommListSize() == 0){
6526d6425
<     /*DEVELOPING
6528,6533d6426
< //ValidaÃ§Ã£o
< if(!currentFilter){
<     QMessageBox::warning(this,"Warning","You must load an alignment.");
<     ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<     return;
< }
6538a6432,6436
>     /*
>     if(currentFilter->getCommListSize() == 0){
>         QMessageBox::warning(this,"Warning","You must have run correlation methods");
>         return;
>     }*/
6557c6455
< */
---
> 
6676,6677c6574
<     vector<string> conserved = currentFilter->getConsRes();
<     currentNetwork->uniprotLook(ui->chkConserveds->isChecked(),ui->chkComm->isChecked(),proteins,idproteins,conserved,fullAlignment,fullSequences);
---
>     currentFilter->uniprotLook(ui->chkConserveds->isChecked(),ui->chkComm->isChecked(),proteins,idproteins,minCons,fullAlignment,fullSequences);
6694d6590
<     /*
6763d6658
<     */
6773c6668
<         vector<Uniprot*> features = currentNetwork->getAllResidueFeatures(item.toStdString());
---
>         vector<Uniprot*> features = currentFilter->getAllResidueFeatures(item.toStdString());
6830d6724
<     /*
6850a6745
> 
6852d6746
<     */
6856d6749
<     /*
6876a6770
> 
6878d6771
<     */
6882d6774
<     /*
6902a6795
> 
6904d6796
<     */
6908d6799
<     /*
6928a6820
> 
6930d6821
<     */
6934d6824
<     /*
6956d6845
<     */
6960d6848
<     /*
6982d6869
<     */
6986d6872
<     /*
7008d6893
<     */
7012d6896
<     /*
7034d6917
<     */
7038,7043d6920
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7050c6927
<     unsigned int nOfComms = currentNetwork->getCommListSize();
---
>     unsigned int nOfComms = currentFilter->getCommListSize();
7069c6946
<         vector<string> comms = currentNetwork->getCommunitie(index);
---
>         vector<string> comms = currentFilter->getCommunitie(index);
7125c7002
<     currentNetwork->addItemToCommunity(text.toStdString(),nc);
---
>     currentFilter->addItemToCommunity(text.toStdString(),nc);
7128c7005
<     vector<string> comms = currentNetwork->getCommunitie(nc);
---
>     vector<string> comms = currentFilter->getCommunitie(nc);
7147c7024
<     currentNetwork->removeItemOfCommunity(nc,residueIndex);
---
>     currentFilter->removeItemOfCommunity(nc,residueIndex);
7150c7027
<     vector<string> comms = currentNetwork->getCommunitie(nc);
---
>     vector<string> comms = currentFilter->getCommunitie(nc);
7162c7039
<     currentNetwork->addCommunity(newComm);
---
>     currentFilter->addCommunity(newComm);
7165c7042
<     int nOfComms = currentNetwork->getCommListSize();
---
>     int nOfComms = currentFilter->getCommListSize();
7173,7179d7049
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
< 
7264,7270d7133
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
< 
7280,7284d7142
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7302,7306d7159
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7324,7328d7176
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7346,7351c7194
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getCorrGraphSize() == 0){
7379a7223,7225
>     //ui->cmdNextResult->setVisible(false);
>     //ui->cmdBackResult->setVisible(false);
> 
7381,7386c7227
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getCorrGraphSize() == 0){
7401d7241
<     /*//OLD
7413d7252
<     */
7418,7423c7257
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getDeltasSize() == 0){
7432a7267
> 
7437,7441d7271
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7456,7466c7286
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
<         QMessageBox::warning(this,"Warning","You must run correlation analysis.");
<         ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
<         return;
<     }
<     if(currentNetwork->getCommPDBPath() == ""){
---
>     if(currentFilter->getCommPDBPath() == ""){
7479,7484d7298
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7490,7496d7303
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
< 
7501c7308
<     if(currentNetwork->getCommListSize() > 0){
---
>     if(currentFilter->getCommListSize() > 0){
7503c7310
<         for(unsigned int i = 0; i < currentNetwork->getCommListSize(); i++){
---
>         for(unsigned int i = 0; i < currentFilter->getCommListSize(); i++){
7513,7518d7319
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7545,7551c7346
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getCommListSize() == 0){
7581,7587c7376
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getNumOfUtilComms() == 0){
7603,7609c7392
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getNumOfUtilComms() == 0){
7625,7631c7408
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
---
>     if(currentFilter->getNumOfUtilComms() == 0){
7647,7652d7423
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
7659c7430
<     if(!currentNetwork){
---
>     if(currentFilter->getNumOfUtilComms() == 0){
7675,7685c7446
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
<         QMessageBox::warning(this,"Warning","You must run correlation analysis");
<         ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
<         return;
<     }
<     if(currentNetwork->getUniprotMinedSize() == 0){
---
>     if(currentFilter->getUniprotMinedSize() == 0){
7702,7713c7463
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
<     if(!currentNetwork){
<         QMessageBox::warning(this,"Warning","You must run correlation analysis.");
<         ui->stackedWidget->setCurrentIndex(STACK_CORRELATION);
<         return;
<     }
<     if(currentNetwork->getUniprotMinedSize() == 0){
---
>     if(currentFilter->getUniprotMinedSize() == 0){
7730,7736d7479
<     //ValidaÃ§Ã£o
<     if(!currentFilter){
<         QMessageBox::warning(this,"Warning","You must load an alignment.");
<         ui->stackedWidget->setCurrentIndex(STACK_ALIGNMENT);
<         return;
<     }
< 
8147,8148c7890,7891
<             for(unsigned int i = 0; i < ui->listWidget2->topLevelItemCount(); i++){
<                 if(ui->listWidget2->topLevelItem(i)->text(0) == text){
---
>             for(unsigned int i = 0; i < ui->listWidget2->count(); i++){
>                 if(ui->listWidget2->item(i)->text() == text){
8500c8243
<     if(newFilter){//ACRESCENTAR O QTREEWIDGETITEM
---
>     if(newFilter){
8512d8254
<         filter->setSubsetFrequencies(currentFilter->getSubsetFrequencies());
8516,8519d8257
<         QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<         treeItem->setText(0,alignname.c_str());
<         filter->setQtreeWidgetItem(treeItem);
< 
8522c8260,8262
<         ui->listWidget2->setCurrentItem(treeItem);
---
>         ui->listWidget2->addItem(alignname.c_str());
>         ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
>         emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
8771d8510
<         currentFilter->convertLowerDots();
8773a8513
>         currentFilter->convertLowerDots();
9322c9062
< void MainWindow::on_listWidget2_currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous)
---
> void MainWindow::on_listWidget2_currentRowChanged(int currentRow)
9324,9325c9064
<     string filtername;
<     string networkname = "";
---
>     QListWidgetItem* item = ui->listWidget2->item(currentRow);
9327,9338c9066,9067
<     //Verifica se o nÃ³ selecionado Ã© um filtro ou uma rede, se for rede retorna seu filtro
<     if(current == NULL) return;
< 
<     if(!current->parent()){
<         filtername = current->text(0).toStdString();
<     }else{
<         networkname = current->text(0).toStdString();
<         filtername = current->parent()->text(0).toStdString();
<     }
< 
<     //Recupera e armazena o filtro
<     Filter *filter = currentAlign->getFilterByName(filtername);
---
>     //Recupera e atualiza o filtro atual
>     Filter *filter = currentAlign->getFilterByName(item->text().toStdString());
9341,9345d9069
<     //Recupera e armazena a network atual
<     if(networkname == "") currentNetwork = currentFilter->getNetwork(0);
<     else currentNetwork = currentFilter->getNetworkByName(networkname);
< 
<     //Limpa campos de resultados
9361,9362c9085,9089
<     //Label na tela do minss
<     ui->lblNseq->setText("Number of sequences in the alignment: " + QString::number(filter->getSequencesCount()));
---
>     for(unsigned int i = 0; i < pdbs.size(); i++){
>         Pdb* structure = pdbs[i];
>         ui->lstRecomendedPDBs->addItem(structure->getId().c_str());
>         ui->lstPDBsLoaded_2->addItem(structure->getId().c_str());
>     }
9363a9091
>     ui->lblNseq->setText("Number of sequences in the alignment: " + QString::number(filter->getSequencesCount()));
9366a9095
>         //string proteinName = this->split(filter->getSequenceName(i),'/')[0];
9367a9097,9098
>         //ui->cmbRefSeq_2->addItem(proteinName.c_str());
>         //ui->cmbRefSeq_3->addItem(proteinName.c_str());
9393,9394d9123
<             ui->lstRecomendedPDBs->addItem(pdb->getId().c_str());
<             ui->lstPDBsLoaded_2->addItem(pdb->getId().c_str());
9402d9130
<     //MudanÃ§as de filtros em pÃ¡ginas especificas
9404c9132
<         unsigned int nOfComms = currentNetwork->getCommListSize();
---
>         unsigned int nOfComms = currentFilter->getCommListSize();
9415c9143,9144
<     //Prepara tela de conservaÃ§Ã£o para usar pesos ou frequÃªncias
---
>     currentFilter->CalculateFrequencies();
> 
9448c9177
<     QProgressDialog progress("Loading the alignment...","Cancel",0,currentNetwork->Communities.size());
---
>     QProgressDialog progress("Loading the alignment...","Cancel",0,currentFilter->Communities.size());
9452c9181
<     for(unsigned int i = 0; i < currentNetwork->Communities.size(); i++){
---
>     for(unsigned int i = 0; i < currentFilter->Communities.size(); i++){
9457c9186
<         Filter* filter = new Filter(name,currentFilter->getAlphabet(),3);//ACRESCENTAR O QTREEWIDGETITEM
---
>         Filter* filter = new Filter(name,currentFilter->getAlphabet(),3);
9459c9188
<         for(unsigned int j = 0; j < currentNetwork->sequences->size(); j++){
---
>         for(unsigned int j = 0; j < currentFilter->sequences.size(); j++){
9462,9463c9191,9192
<             for(unsigned int k = 0; k < currentNetwork->Communities[i].pos.size(); k++){
<                 if(currentNetwork->sequences->at(j).c_str()[currentNetwork->Communities[i].pos[k]] == currentNetwork->Communities[i].aa[k])
---
>             for(unsigned int k = 0; k < currentFilter->Communities[i].pos.size(); k++){
>                 if(currentFilter->sequences[j].c_str()[currentFilter->Communities[i].pos[k]] == currentFilter->Communities[i].aa[k])
9466,9467c9195,9196
<             if(members == currentNetwork->Communities[i].pos.size())
<                 filter->addSequences(currentNetwork->sequencenames->at(j),currentNetwork->sequences->at(j));
---
>             if(members == currentFilter->Communities[i].pos.size())
>                 filter->addSequences(currentFilter->sequencenames[j],currentFilter->sequences[j]);
9470,9472d9198
<         QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<         treeItem->setText(0,name.c_str());
<         filter->setQtreeWidgetItem(treeItem);
9474c9200
<         //ui->listWidget2->addItem(name.c_str());
---
>         ui->listWidget2->addItem(name.c_str());
9541,9552c9267,9268
<     if(ui->listWidget2->currentItem() == NULL){
<         QMessageBox::warning(this,"Warning","You must select a filter to remove.");
<         return;
<     }
< 
<     if(!ui->listWidget2->currentItem()->parent()){
<         QTreeWidgetItem *currentItem = ui->listWidget2->currentItem();
< 
<         if(currentItem->text(0) == "Full Alignment"){
<             QMessageBox::warning(this,"Warning","You can't rename the Full Alignment.");
<             return;
<         }
---
>     int currentFilterId = ui->listWidget2->currentRow();
>     bool ok;
9554c9270
<         bool ok;
---
>     if(currentFilterId > 0){
9557c9273
<                                              ui->listWidget2->currentItem()->text(0), &ok);
---
>                                              ui->listWidget2->currentItem()->text(), &ok);
9559,9563d9274
<             if(!currentAlign->verifyValidFilterName(text.toStdString())){
<                 QMessageBox::warning(this,"Warning","Invalid filter name.");
<                 return;
<             }
< 
9565c9276
<             ui->listWidget2->currentItem()->setText(0,text);
---
>             ui->listWidget2->currentItem()->setText(text);
9567,9569d9277
<     }else{
<         QMessageBox::warning(this,"Warning","You can't rename a network.");
<         return;
9574,9575c9282,9283
<     on_cmdRemoveFilter_clicked();
< }
---
>     Filter *filter = currentAlign->getFilterByName(ui->listWidget2->currentItem()->text().toStdString());
>     currentFilter = filter;
9577d9284
< void MainWindow::duplicateFilter(){
9579c9286
<         QMessageBox::warning(this,"Warning","You must select a filter to remove.");
---
>         QMessageBox::warning(this,"Error","You must select a filter to remove.");
9583,9584c9290,9293
<     if(!ui->listWidget2->currentItem()->parent()){
<         //Filtro
---
>     if(currentFilter->getType() == 9){
>         QMessageBox::warning(this,"Error","You cant remove full alignment.");
>         return;
>     }
9586,9594c9295,9318
<         //Monta o novo nome
<         int sufixNumber = 2;
<         string possibleName = currentFilter->getName() + to_string(sufixNumber);
<         while(true){
<             possibleName = currentFilter->getName() + to_string(sufixNumber);
<             if(currentAlign->verifyValidFilterName(possibleName)){
<                 break;
<             }else
<                 sufixNumber++;
---
>     int pos = ui->listWidget2->currentIndex().row();
>     currentAlign->removeFilter(ui->listWidget2->currentItem()->text().toStdString());
>     delete ui->listWidget2->item(pos);
>     if(pos > 0) ui->listWidget2->setCurrentRow(pos-1);
>     else ui->listWidget2->setCurrentRow(0);
>     emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
> }
> 
> void MainWindow::duplicateFilter(){
>     bool ok;
>     string possibleName = currentFilter->getName() + "_2";
>     QString text = QInputDialog::getText(this, tr("Duplicate Filter"),
>                                          tr("Type the new filtered sub-alignment name:"), QLineEdit::Normal,
>                                          possibleName.c_str(), &ok);
>     if (ok && !text.isEmpty()){
>         vector<Filter*> loaded = currentAlign->getFilters();
> 
>         for(unsigned int i = 0; i < loaded.size(); i++){
>             Filter* f = loaded[i];
> 
>             if(f->getName() == text.toStdString()){
>                 QMessageBox::information(this,"Warning","Invalid filter name");
>                 return;
>             }
9601c9325
<         Filter *filter = new Filter(possibleName,currentFilter->getAlphabet(),type);//ACRESCENTAR O QTREEWIDGETITEM
---
>         Filter *filter = new Filter(text.toStdString(),currentFilter->getAlphabet(),type);
9609,9618d9332
<         QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<         treeItem->setText(0,possibleName.c_str());
<         filter->setQtreeWidgetItem(treeItem);
<         for(unsigned int i = 0; i < currentFilter->countNetworks(); i++){//Testar duplicar, depois deletar uma network e ver se o original mantem
<             Network *net = new Network(&filter->sequences,&filter->sequencenames,currentFilter->getNetwork(i));
<             filter->addNetwork(net);
<             QTreeWidgetItem *child = new QTreeWidgetItem();
<             child->setText(0,net->getName().c_str());
<             treeItem->addChild(child);
<         }
9620,9624c9334,9336
<         ui->listWidget2->setCurrentItem(treeItem);
<     }else{
<         //Network
<         QMessageBox::warning(this,"Warning","You can't duplicate a network.");
<         return;
---
>         ui->listWidget2->addItem(text);
>         ui->listWidget2->item(ui->listWidget2->count()-1)->setSelected(true);
>         emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
9632c9344
<         vector<string> residues = currentNetwork->getCommunitie(ui->cmbSubAlignComms->currentIndex()-1);
---
>         vector<string> residues = currentFilter->getCommunitie(ui->cmbSubAlignComms->currentIndex()-1);
9649d9360
<         ui->txtSubAlignName->setFocus();
9655,9656c9366
<         QMessageBox::warning(this,"Invalid Dataset","The residues list is blank.");
<         ui->txtResiduesSubAlign->setFocus();
---
>         QMessageBox::warning(this,"Invalid Dataset","There's none key residue set");
9675,9678c9385,9386
<                 if(pos <= currentFilter->sequences[0].size() && pos > 0){
<                     std::tuple<char,int> tup (aa[0],pos);
<                     residuesHits.push_back(tup);
<                 }
---
>                 std::tuple<char,int> tup (aa[0],pos);
>                 residuesHits.push_back(tup);
9718,9721d9425
<         filter->setSubsetFrequencies(currentFilter->getSubsetFrequencies());
<         QTreeWidgetItem *treeItem = new QTreeWidgetItem(ui->listWidget2);
<         treeItem->setText(0,name.c_str());
<         filter->setQtreeWidgetItem(treeItem);
9725c9429,9431
<         ui->listWidget2->setCurrentItem(treeItem);
---
>         ui->listWidget2->addItem(name.c_str());
>         ui->listWidget2->setCurrentRow(ui->listWidget2->count()-1);
>         emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
9815,9816c9521
<         //emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
<         emit ui->listWidget2->currentItemChanged(filter2->getQTreeWidgetItem(),filter1->getQTreeWidgetItem());
---
>         emit ui->listWidget2->activated(ui->listWidget2->currentIndex());
9827c9532
<     NetworkVisualization* nw = new NetworkVisualization(this,currentNetwork,libpath);
---
>     NetworkVisualization* nw = new NetworkVisualization(this,currentFilter,libpath);
9841d9545
<     /*
10016d9719
<     */
10044,10053d9746
< }
< 
< QTreeWidgetItem* MainWindow::getFilterItem(){
<     QTreeWidgetItem* item = currentFilter->getQTreeWidgetItem();
< 
<     if(!item){
<         item = ui->listWidget2->topLevelItem(0);
<     }
< 
<     return item;
